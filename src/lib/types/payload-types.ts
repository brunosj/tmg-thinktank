/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
	| 'Pacific/Midway'
	| 'Pacific/Niue'
	| 'Pacific/Honolulu'
	| 'Pacific/Rarotonga'
	| 'America/Anchorage'
	| 'Pacific/Gambier'
	| 'America/Los_Angeles'
	| 'America/Tijuana'
	| 'America/Denver'
	| 'America/Phoenix'
	| 'America/Chicago'
	| 'America/Guatemala'
	| 'America/New_York'
	| 'America/Bogota'
	| 'America/Caracas'
	| 'America/Santiago'
	| 'America/Buenos_Aires'
	| 'America/Sao_Paulo'
	| 'Atlantic/South_Georgia'
	| 'Atlantic/Azores'
	| 'Atlantic/Cape_Verde'
	| 'Europe/London'
	| 'Europe/Berlin'
	| 'Africa/Lagos'
	| 'Europe/Athens'
	| 'Africa/Cairo'
	| 'Europe/Moscow'
	| 'Asia/Riyadh'
	| 'Asia/Dubai'
	| 'Asia/Baku'
	| 'Asia/Karachi'
	| 'Asia/Tashkent'
	| 'Asia/Calcutta'
	| 'Asia/Dhaka'
	| 'Asia/Almaty'
	| 'Asia/Jakarta'
	| 'Asia/Bangkok'
	| 'Asia/Shanghai'
	| 'Asia/Singapore'
	| 'Asia/Tokyo'
	| 'Asia/Seoul'
	| 'Australia/Brisbane'
	| 'Australia/Sydney'
	| 'Pacific/Guam'
	| 'Pacific/Noumea'
	| 'Pacific/Auckland'
	| 'Pacific/Fiji';

export interface Config {
	auth: {
		users: UserAuthOperations;
	};
	blocks: {};
	collections: {
		homepage: Homepage;
		about: About;
		'events-page': EventsPage;
		'blog-page': BlogPage;
		'jobs-page': JobsPage;
		'news-page': NewsPage;
		'publications-page': PublicationsPage;
		publications: Publication;
		'report-builder': ReportBuilder;
		'videos-page': VideosPage;
		'publication-features': PublicationFeature;
		'event-series': EventSery;
		projects: Project;
		initiatives: Initiative;
		events: Event;
		speakers: Speaker;
		news: News;
		banners: Banner;
		pages: Page;
		posts: Post;
		categories: Category;
		collaborators: Collaborator;
		jobs: Job;
		teams: Team;
		documents: Document;
		media: Media;
		'local-images': LocalImage;
		videos: Video;
		users: User;
		redirects: Redirect;
		forms: Form;
		'form-submissions': FormSubmission;
		search: Search;
		folders: FolderInterface;
		'payload-jobs': PayloadJob;
		'payload-locked-documents': PayloadLockedDocument;
		'payload-preferences': PayloadPreference;
		'payload-migrations': PayloadMigration;
	};
	collectionsJoins: {
		folders: {
			documentsAndFolders: 'folders' | 'media';
		};
	};
	collectionsSelect: {
		homepage: HomepageSelect<false> | HomepageSelect<true>;
		about: AboutSelect<false> | AboutSelect<true>;
		'events-page': EventsPageSelect<false> | EventsPageSelect<true>;
		'blog-page': BlogPageSelect<false> | BlogPageSelect<true>;
		'jobs-page': JobsPageSelect<false> | JobsPageSelect<true>;
		'news-page': NewsPageSelect<false> | NewsPageSelect<true>;
		'publications-page': PublicationsPageSelect<false> | PublicationsPageSelect<true>;
		publications: PublicationsSelect<false> | PublicationsSelect<true>;
		'report-builder': ReportBuilderSelect<false> | ReportBuilderSelect<true>;
		'videos-page': VideosPageSelect<false> | VideosPageSelect<true>;
		'publication-features': PublicationFeaturesSelect<false> | PublicationFeaturesSelect<true>;
		'event-series': EventSeriesSelect<false> | EventSeriesSelect<true>;
		projects: ProjectsSelect<false> | ProjectsSelect<true>;
		initiatives: InitiativesSelect<false> | InitiativesSelect<true>;
		events: EventsSelect<false> | EventsSelect<true>;
		speakers: SpeakersSelect<false> | SpeakersSelect<true>;
		news: NewsSelect<false> | NewsSelect<true>;
		banners: BannersSelect<false> | BannersSelect<true>;
		pages: PagesSelect<false> | PagesSelect<true>;
		posts: PostsSelect<false> | PostsSelect<true>;
		categories: CategoriesSelect<false> | CategoriesSelect<true>;
		collaborators: CollaboratorsSelect<false> | CollaboratorsSelect<true>;
		jobs: JobsSelect<false> | JobsSelect<true>;
		teams: TeamsSelect<false> | TeamsSelect<true>;
		documents: DocumentsSelect<false> | DocumentsSelect<true>;
		media: MediaSelect<false> | MediaSelect<true>;
		'local-images': LocalImagesSelect<false> | LocalImagesSelect<true>;
		videos: VideosSelect<false> | VideosSelect<true>;
		users: UsersSelect<false> | UsersSelect<true>;
		redirects: RedirectsSelect<false> | RedirectsSelect<true>;
		forms: FormsSelect<false> | FormsSelect<true>;
		'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
		search: SearchSelect<false> | SearchSelect<true>;
		folders: FoldersSelect<false> | FoldersSelect<true>;
		'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
		'payload-locked-documents':
			| PayloadLockedDocumentsSelect<false>
			| PayloadLockedDocumentsSelect<true>;
		'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
		'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
	};
	db: {
		defaultIDType: string;
	};
	globals: {
		header: Header;
		footer: Footer;
	};
	globalsSelect: {
		header: HeaderSelect<false> | HeaderSelect<true>;
		footer: FooterSelect<false> | FooterSelect<true>;
	};
	locale: null;
	user: User & {
		collection: 'users';
	};
	jobs: {
		tasks: {
			schedulePublish: TaskSchedulePublish;
			inline: {
				input: unknown;
				output: unknown;
			};
		};
		workflows: unknown;
	};
}

// Core interfaces that will be referenced throughout
export interface ReportBuilder {
	id: string;
	title?: string | null;
	description?: string | null;
	slug?: string | null;
	colors?: {
		primary?: string | null;
		secondary?: string | null;
		accent?: string | null;
	};
	layout?:
		| (
				| SectionBlock
				| HeadingBlock
				| PictureBlock
				| TextBlock
				| HeroBlock
				| HighlightsBlock
				| GridTextImageBlock
				| TextBoxBlock
				| TwoColumnBlock
				| TableBlock
				| ScrollytellingBlock
		  )[]
		| null;
	meta?: {
		title?: string | null;
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}

// Block interfaces
export interface SectionBlock {
	parameters?: {
		width?: ('sm' | 'md' | 'lg' | 'xl' | 'full') | null;
		alignment?: ('left' | 'center' | 'right') | null;
		verticalAlignment?: ('top' | 'center' | 'bottom') | null;
		paddingTop?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
		paddingBottom?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
		paddingLeft?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
		paddingRight?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
		insideContainer?: boolean | null;
		minHeight?: ('none' | 'screen-50' | 'screen-75' | 'screen-100') | null;
		content?:
			| (
					| HeadingBlock
					| PictureBlock
					| TextBlock
					| HeroBlock
					| HighlightsBlock
					| GridTextImageBlock
					| TextBoxBlock
					| TwoColumnBlock
					| TableBlock
					| ScrollytellingBlock
			  )[]
			| null;
	};
	styling?: {
		backgroundColor?: string | null;
		textColor?: string | null;
		borderRadius?: ('none' | 'sm' | 'md' | 'lg' | 'full') | null;
		shadow?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'section';
}

export interface HeadingBlock {
	parameters?: {
		fontSize?: ('xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl') | null;
		fontWeight?: ('light' | 'normal' | 'medium' | 'semibold' | 'bold') | null;
		textTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
		width?: ('sm' | 'md' | 'lg' | 'xl' | 'full') | null;
		alignment?: ('left' | 'center' | 'right') | null;
		position?: ('top' | 'center' | 'bottom') | null;
		insideContainer?: boolean | null;
	};
	styling?: {
		textColor?: string | null;
		highlightColor?: string | null;
		showBackground?: boolean | null;
		backgroundColor?: string | null;
		backgroundRounded?: boolean | null;
	};
	content?: {
		content?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'heading';
}

export interface PictureBlock {
	image?: (string | null) | Media;
	width?: ('sm' | 'md' | 'lg' | 'xl' | 'full') | null;
	position?: ('left' | 'center' | 'right') | null;
	insideContainer?: boolean | null;
	showCaption?: boolean | null;
	captionSettings?: {
		captionPosition?: ('bottom' | 'overlay') | null;
	};
	showOverlay?: boolean | null;
	overlaySettings?: {
		overlayColor?: string | null;
		overlayOpacity?: ('10' | '20' | '30' | '40' | '50' | '60' | '70' | '80' | '90') | null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'picture';
}

export interface TextBlock {
	width?: ('sm' | 'md' | 'lg' | 'xl' | 'full') | null;
	columnLayout?: ('1' | '2' | '3') | null;
	alignment?: ('left' | 'center' | 'right') | null;
	position?: ('left' | 'center' | 'right') | null;
	paddingTop?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
	paddingBottom?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
	paddingLeft?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
	paddingRight?: ('none' | 'sm' | 'md' | 'lg' | 'xl') | null;
	content?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	insideContainer?: boolean | null;
	styling?: {
		textColor?: string | null;
		backgroundColor?: string | null;
		columnGap?: ('sm' | 'md' | 'lg' | 'xl') | null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'text';
}

export interface HeroBlock {
	title?: string | null;
	subtitle?: string | null;
	backgroundImage?: (string | null) | Media;
	foregroundImage?: (string | null) | Media;
	backgroundColor?: string | null;
	textColor?: string | null;
	alignment?: ('left' | 'center' | 'right') | null;
	height?: ('sm' | 'md' | 'lg' | 'xl' | 'screen') | null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'hero';
}

export interface HighlightsBlock {
	styling?: {
		backgroundColor?: string | null;
		headingColor?: string | null;
		contentColor?: string | null;
	};
	highlights?:
		| {
				heading?: string | null;
				content?: {
					root: {
						type: string;
						children: {
							type: string;
							version: number;
							[k: string]: unknown;
						}[];
						direction: ('ltr' | 'rtl') | null;
						format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
						indent: number;
						version: number;
					};
					[k: string]: unknown;
				} | null;
				id?: string | null;
		  }[]
		| null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'highlights';
}

export interface GridTextImageBlock {
	parameters?: {
		stickyImage?: boolean | null;
		invertColumns?: boolean | null;
	};
	styling?: {
		backgroundColor?: string | null;
		textColor?: string | null;
	};
	content?: {
		heading?: {
			heading?: HeadingBlock;
		};
		text?: {
			text?: TextBlock;
		};
		image?: {
			picture?: PictureBlock;
		};
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'gridTextImage';
}

export interface TextBoxBlock {
	width?: ('sm' | 'md' | 'lg' | 'xl' | 'full') | null;
	position?: ('left' | 'center' | 'right') | null;
	content?: {
		Blocks?: (HeadingBlock | TextBlock)[] | null;
	};
	styling?: {
		backgroundColor?: string | null;
		borderColor?: string | null;
		borderWidth?: ('1' | '2' | '4' | '8') | null;
		borderRadius?: ('none' | 'sm' | 'md' | 'lg' | 'full') | null;
		showLeftAccent?: boolean | null;
		leftAccentColor?: string | null;
		leftAccentWidth?: ('2' | '4' | '8') | null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'textBox';
}

export interface TwoColumnBlock {
	parameters?: {
		leftColumnWidth?: ('25' | '33' | '50' | '66' | '75') | null;
		columnGap?: ('sm' | 'md' | 'lg' | 'xl') | null;
		leftColumnPosition?: ('top' | 'center' | 'bottom') | null;
		rightColumnPosition?: ('top' | 'center' | 'bottom') | null;
		leftColumnSticky?: boolean | null;
		rightColumnSticky?: boolean | null;
	};
	styling?: {
		backgroundColor?: string | null;
		textColor?: string | null;
	};
	content?: {
		leftColumnContent?:
			| (
					| HeadingBlock
					| PictureBlock
					| TextBlock
					| HeroBlock
					| HighlightsBlock
					| GridTextImageBlock
					| TextBoxBlock
					| TableBlock
					| ScrollytellingBlock
			  )[]
			| null;
		rightColumnContent?:
			| (
					| HeadingBlock
					| PictureBlock
					| TextBlock
					| HeroBlock
					| HighlightsBlock
					| GridTextImageBlock
					| TextBoxBlock
					| TableBlock
					| ScrollytellingBlock
			  )[]
			| null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'twoColumn';
}

export interface TableBlock {
	parameters?: {
		rowGap?: ('sm' | 'md' | 'lg') | null;
	};
	content?: {
		rows?:
			| {
					styling?: {
						backgroundColor?: string | null;
						textColor?: string | null;
						fontSize?: ('xs' | 'sm' | 'base' | 'lg' | 'xl') | null;
						fontWeight?: ('light' | 'normal' | 'medium' | 'semibold' | 'bold') | null;
					};
					layout?: {
						columnLayout?: ('1' | '2' | '3' | '4') | null;
						showBullets?: boolean | null;
						singleContent?: {
							root: {
								type: string;
								children: {
									type: string;
									version: number;
									[k: string]: unknown;
								}[];
								direction: ('ltr' | 'rtl') | null;
								format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
								indent: number;
								version: number;
							};
							[k: string]: unknown;
						} | null;
						leftContent?: {
							root: {
								type: string;
								children: {
									type: string;
									version: number;
									[k: string]: unknown;
								}[];
								direction: ('ltr' | 'rtl') | null;
								format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
								indent: number;
								version: number;
							};
							[k: string]: unknown;
						} | null;
						rightContent?: {
							root: {
								type: string;
								children: {
									type: string;
									version: number;
									[k: string]: unknown;
								}[];
								direction: ('ltr' | 'rtl') | null;
								format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
								indent: number;
								version: number;
							};
							[k: string]: unknown;
						} | null;
					};
					id?: string | null;
			  }[]
			| null;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'table';
}

export interface ScrollytellingBlock {
	backgroundColor?: string | null;
	content?:
		| (
				| {
						blockType?: 'stepContent';
						content?: {
							root: {
								type: string;
								children: {
									type: string;
									version: number;
									[k: string]: unknown;
								}[];
								direction: ('ltr' | 'rtl') | null;
								format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
								indent: number;
								version: number;
							};
							[k: string]: unknown;
						} | null;
						id?: string | null;
				  }
				| {
						blockType?: 'stepVisual';
						image?: (string | null) | Media;
						id?: string | null;
				  }
		  )[]
		| null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'scrollytelling';
}

// Base interface definitions for other types that are referenced
export interface Media {
	id: string;
	isImported?: boolean | null;
	alt?: string | null;
	caption?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	folder?: (string | null) | FolderInterface;
	updatedAt: string;
	createdAt: string;
	url?: string | null;
	thumbnailURL?: string | null;
	filename?: string | null;
	mimeType?: string | null;
	filesize?: number | null;
	width?: number | null;
	height?: number | null;
	focalX?: number | null;
	focalY?: number | null;
}

export interface FolderInterface {
	id: string;
	name: string;
	folder?: (string | null) | FolderInterface;
	documentsAndFolders?: {
		docs?: (
			| {
					relationTo?: 'folders';
					value: string | FolderInterface;
			  }
			| {
					relationTo?: 'media';
					value: string | Media;
			  }
		)[];
		hasNextPage?: boolean;
		totalDocs?: number;
	};
	updatedAt: string;
	createdAt: string;
}

// Placeholder interfaces for other types - these would be fully defined based on your Payload config
export interface UserAuthOperations {
	forgotPassword: {
		email: string;
		password: string;
	};
	login: {
		email: string;
		password: string;
	};
	registerFirstUser: {
		email: string;
		password: string;
	};
	unlock: {
		email: string;
		password: string;
	};
}

export interface Homepage {
	id: string;
	[k: string]: unknown;
}

export interface About {
	id: string;
	[k: string]: unknown;
}

export interface EventsPage {
	id: string;
	[k: string]: unknown;
}

export interface BlogPage {
	id: string;
	[k: string]: unknown;
}

export interface JobsPage {
	id: string;
	[k: string]: unknown;
}

export interface NewsPage {
	id: string;
	[k: string]: unknown;
}

export interface PublicationsPage {
	id: string;
	[k: string]: unknown;
}

export interface Publication {
	id: string;
	[k: string]: unknown;
}

export interface VideosPage {
	id: string;
	[k: string]: unknown;
}

export interface PublicationFeature {
	id: string;
	[k: string]: unknown;
}

export interface EventSery {
	id: string;
	[k: string]: unknown;
}

export interface Project {
	id: string;
	[k: string]: unknown;
}

export interface Initiative {
	id: string;
	[k: string]: unknown;
}

export interface Event {
	id: string;
	[k: string]: unknown;
}

export interface Speaker {
	id: string;
	[k: string]: unknown;
}

export interface News {
	id: string;
	[k: string]: unknown;
}

export interface Banner {
	id: string;
	[k: string]: unknown;
}

export interface Page {
	id: string;
	[k: string]: unknown;
}

export interface Post {
	id: string;
	[k: string]: unknown;
}

export interface Category {
	id: string;
	[k: string]: unknown;
}

export interface Collaborator {
	id: string;
	[k: string]: unknown;
}

export interface Job {
	id: string;
	[k: string]: unknown;
}

export interface Team {
	id: string;
	[k: string]: unknown;
}

export interface Document {
	id: string;
	[k: string]: unknown;
}

export interface LocalImage {
	id: string;
	[k: string]: unknown;
}

export interface Video {
	id: string;
	[k: string]: unknown;
}

export interface User {
	id: string;
	[k: string]: unknown;
}

export interface Redirect {
	id: string;
	[k: string]: unknown;
}

export interface Form {
	id: string;
	[k: string]: unknown;
}

export interface FormSubmission {
	id: string;
	[k: string]: unknown;
}

export interface Search {
	id: string;
	[k: string]: unknown;
}

export interface PayloadJob {
	id: string;
	[k: string]: unknown;
}

export interface PayloadLockedDocument {
	id: string;
	[k: string]: unknown;
}

export interface PayloadPreference {
	id: string;
	[k: string]: unknown;
}

export interface PayloadMigration {
	id: string;
	[k: string]: unknown;
}

export interface Header {
	id: string;
	[k: string]: unknown;
}

export interface Footer {
	id: string;
	[k: string]: unknown;
}

export interface TaskSchedulePublish {
	input: unknown;
	output?: unknown;
}

// Select interfaces - simplified versions
export interface HomepageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface AboutSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface EventsPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface BlogPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface JobsPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface NewsPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PublicationsPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PublicationsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface ReportBuilderSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface VideosPageSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PublicationFeaturesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface EventSeriesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface ProjectsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface InitiativesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface EventsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface SpeakersSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface NewsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface BannersSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PagesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PostsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface CategoriesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface CollaboratorsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface JobsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface TeamsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface DocumentsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface MediaSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface LocalImagesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface VideosSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface UsersSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface RedirectsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface FormsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface FormSubmissionsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface SearchSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface FoldersSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PayloadJobsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PayloadPreferencesSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PayloadMigrationsSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface HeaderSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface FooterSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface HeadingBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface PictureBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface TextBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface HeroBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface HighlightsBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface GridTextImageBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface TextBoxBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface SectionBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface TwoColumnBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface TableBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}

export interface ScrollytellingBlockSelect<T extends boolean = true> {
	[k: string]: T | unknown;
}
