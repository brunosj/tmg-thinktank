/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
	| 'Pacific/Midway'
	| 'Pacific/Niue'
	| 'Pacific/Honolulu'
	| 'Pacific/Rarotonga'
	| 'America/Anchorage'
	| 'Pacific/Gambier'
	| 'America/Los_Angeles'
	| 'America/Tijuana'
	| 'America/Denver'
	| 'America/Phoenix'
	| 'America/Chicago'
	| 'America/Guatemala'
	| 'America/New_York'
	| 'America/Bogota'
	| 'America/Caracas'
	| 'America/Santiago'
	| 'America/Buenos_Aires'
	| 'America/Sao_Paulo'
	| 'Atlantic/South_Georgia'
	| 'Atlantic/Azores'
	| 'Atlantic/Cape_Verde'
	| 'Europe/London'
	| 'Europe/Berlin'
	| 'Africa/Lagos'
	| 'Europe/Athens'
	| 'Africa/Cairo'
	| 'Europe/Moscow'
	| 'Asia/Riyadh'
	| 'Asia/Dubai'
	| 'Asia/Baku'
	| 'Asia/Karachi'
	| 'Asia/Tashkent'
	| 'Asia/Calcutta'
	| 'Asia/Dhaka'
	| 'Asia/Almaty'
	| 'Asia/Jakarta'
	| 'Asia/Bangkok'
	| 'Asia/Shanghai'
	| 'Asia/Singapore'
	| 'Asia/Tokyo'
	| 'Asia/Seoul'
	| 'Australia/Brisbane'
	| 'Australia/Sydney'
	| 'Pacific/Guam'
	| 'Pacific/Noumea'
	| 'Pacific/Auckland'
	| 'Pacific/Fiji';

export interface Config {
	auth: {
		users: UserAuthOperations;
	};
	blocks: {};
	collections: {
		homepage: Homepage;
		about: About;
		'events-page': EventsPage;
		'blog-page': BlogPage;
		'jobs-page': JobsPage;
		'news-page': NewsPage;
		'publications-page': PublicationsPage;
		publications: Publication;
		'videos-page': VideosPage;
		'publication-features': PublicationFeature;
		'event-series': EventSery;
		projects: Project;
		initiatives: Initiative;
		events: Event;
		speakers: Speaker;
		news: News;
		banners: Banner;
		pages: Page;
		posts: Post;
		categories: Category;
		collaborators: Collaborator;
		jobs: Job;
		teams: Team;
		documents: Document;
		media: Media;
		'local-images': LocalImage;
		videos: Video;
		users: User;
		redirects: Redirect;
		forms: Form;
		'form-submissions': FormSubmission;
		search: Search;
		folders: FolderInterface;
		'payload-jobs': PayloadJob;
		'payload-locked-documents': PayloadLockedDocument;
		'payload-preferences': PayloadPreference;
		'payload-migrations': PayloadMigration;
	};
	collectionsJoins: {
		folders: {
			documentsAndFolders: 'folders' | 'media';
		};
	};
	collectionsSelect: {
		homepage: HomepageSelect<false> | HomepageSelect<true>;
		about: AboutSelect<false> | AboutSelect<true>;
		'events-page': EventsPageSelect<false> | EventsPageSelect<true>;
		'blog-page': BlogPageSelect<false> | BlogPageSelect<true>;
		'jobs-page': JobsPageSelect<false> | JobsPageSelect<true>;
		'news-page': NewsPageSelect<false> | NewsPageSelect<true>;
		'publications-page': PublicationsPageSelect<false> | PublicationsPageSelect<true>;
		publications: PublicationsSelect<false> | PublicationsSelect<true>;
		'videos-page': VideosPageSelect<false> | VideosPageSelect<true>;
		'publication-features': PublicationFeaturesSelect<false> | PublicationFeaturesSelect<true>;
		'event-series': EventSeriesSelect<false> | EventSeriesSelect<true>;
		projects: ProjectsSelect<false> | ProjectsSelect<true>;
		initiatives: InitiativesSelect<false> | InitiativesSelect<true>;
		events: EventsSelect<false> | EventsSelect<true>;
		speakers: SpeakersSelect<false> | SpeakersSelect<true>;
		news: NewsSelect<false> | NewsSelect<true>;
		banners: BannersSelect<false> | BannersSelect<true>;
		pages: PagesSelect<false> | PagesSelect<true>;
		posts: PostsSelect<false> | PostsSelect<true>;
		categories: CategoriesSelect<false> | CategoriesSelect<true>;
		collaborators: CollaboratorsSelect<false> | CollaboratorsSelect<true>;
		jobs: JobsSelect<false> | JobsSelect<true>;
		teams: TeamsSelect<false> | TeamsSelect<true>;
		documents: DocumentsSelect<false> | DocumentsSelect<true>;
		media: MediaSelect<false> | MediaSelect<true>;
		'local-images': LocalImagesSelect<false> | LocalImagesSelect<true>;
		videos: VideosSelect<false> | VideosSelect<true>;
		users: UsersSelect<false> | UsersSelect<true>;
		redirects: RedirectsSelect<false> | RedirectsSelect<true>;
		forms: FormsSelect<false> | FormsSelect<true>;
		'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
		search: SearchSelect<false> | SearchSelect<true>;
		folders: FoldersSelect<false> | FoldersSelect<true>;
		'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
		'payload-locked-documents':
			| PayloadLockedDocumentsSelect<false>
			| PayloadLockedDocumentsSelect<true>;
		'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
		'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
	};
	db: {
		defaultIDType: string;
	};
	globals: {
		header: Header;
		footer: Footer;
	};
	globalsSelect: {
		header: HeaderSelect<false> | HeaderSelect<true>;
		footer: FooterSelect<false> | FooterSelect<true>;
	};
	locale: null;
	user: User & {
		collection: 'users';
	};
	jobs: {
		tasks: {
			schedulePublish: TaskSchedulePublish;
			inline: {
				input: unknown;
				output: unknown;
			};
		};
		workflows: unknown;
	};
}
export interface UserAuthOperations {
	forgotPassword: {
		email: string;
		password: string;
	};
	login: {
		email: string;
		password: string;
	};
	registerFirstUser: {
		email: string;
		password: string;
	};
	unlock: {
		email: string;
		password: string;
	};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
	id: string;
	title: string;
	hero?: {
		/**
		 * Select content to feature in the hero section
		 */
		featuredContent?:
			| ({
					relationTo: 'posts';
					value: string | Post;
			  } | null)
			| ({
					relationTo: 'news';
					value: string | News;
			  } | null)
			| ({
					relationTo: 'publications';
					value: string | Publication;
			  } | null)
			| ({
					relationTo: 'events';
					value: string | Event;
			  } | null)
			| ({
					relationTo: 'pages';
					value: string | Page;
			  } | null);
		title?: string | null;
		subtitle?: string | null;
		richText?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Upload an image for the hero section
		 */
		media?: (string | null) | Media;
		/**
		 * Upload a background image or video
		 */
		backgroundMedia?: (string | null) | Media;
		/**
		 * Enter a hex color value (e.g., #FFFFFF)
		 */
		backgroundColor?: string | null;
		maintainAspectRatio?: boolean | null;
	};
	latestSectionTitle?: string | null;
	latestSectionSubtitle?: string | null;
	featuredItems?:
		| (
				| {
						relationTo: 'news';
						value: string | News;
				  }
				| {
						relationTo: 'events';
						value: string | Event;
				  }
		  )[]
		| null;
	programmeSectionTitle?: string | null;
	eventSectionTitle?: string | null;
	eventSectionSubtitle?: string | null;
	eventSeriesBanner?: (string | null) | Media;
	blogSectionTitle?: string | null;
	blogSectionSubtitle?: string | null;
	/**
	 * Select a newsletter banner from the Banners collection. Only banners with type "newsletter" will be available.
	 */
	newsletterBanner?: (string | null) | Banner;
	networksSectionTitle?: string | null;
	networksSectionSubtitle?: string | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
	id: string;
	title: string;
	Info?: {
		/**
		 * Primary programme
		 */
		programme?: (string | null) | Category;
		/**
		 * Secondary programme (optional)
		 */
		secondProgramme?: (string | null) | Category;
		/**
		 * Related projects
		 */
		project?: (string | Project)[] | null;
		/**
		 * Article date from Contentful (converted from dateFormat)
		 */
		dateFormat?: string | null;
		summary?: string | null;
		date?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * External source (optional)
		 */
		source?: string | null;
		/**
		 * External source URL (optional)
		 */
		sourceUrl?: string | null;
	};
	heroImage?: (string | null) | Media;
	content: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	};
	relatedPosts?: (string | Post)[] | null;
	/**
	 * Related news articles
	 */
	relatedNews?: (string | News)[] | null;
	/**
	 * Related publications
	 */
	relatedPublications?: (string | Publication)[] | null;
	/**
	 * Related video (optional)
	 */
	video?: (string | null) | Video;
	categories?: (string | Category)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	authors?:
		| {
				authorType?: ('team' | 'external') | null;
				teamMember?: (string | null) | Team;
				externalAuthor?: string | null;
				id?: string | null;
		  }[]
		| null;
	populatedAuthors?:
		| {
				id?: string | null;
				name?: string | null;
				type?: string | null;
		  }[]
		| null;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	/**
	 * Cloudinary URL for hero image (migration field)
	 */
	imageFromCloudinary?: string | null;
	/**
	 * Indicates if this post has embedded assets that need manual upload
	 */
	hasEmbeddedAssets?: boolean | null;
	/**
	 * Information about embedded assets that need manual handling
	 */
	embeddedAssetsInfo?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
	id: string;
	title: string;
	/**
	 * Type of thematic area
	 */
	type?: ('programme' | 'topic' | 'general') | null;
	/**
	 * Action verb for programmes (e.g., "Transforming", "Building")
	 */
	actionVerb?: string | null;
	/**
	 * Subtitle for programmes
	 */
	subtitle?: string | null;
	/**
	 * Rich text description
	 */
	description?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	/**
	 * Short summary for topics
	 */
	summary?: string | null;
	/**
	 * Introduction description for topics
	 */
	descriptionIntro?: string | null;
	/**
	 * Banner image for programmes and topics
	 */
	bannerImage?: (string | null) | Media;
	/**
	 * Featured quote
	 */
	quote?: string | null;
	/**
	 * Author of the quote
	 */
	quoteAuthor?: string | null;
	/**
	 * Related topics (for programmes)
	 */
	topics?: (string | Category)[] | null;
	slug?: string | null;
	slugLock?: boolean | null;
	/**
	 * Original Contentful entry ID
	 */
	contentfulId?: string | null;
	/**
	 * Notes from the migration process
	 */
	migrationNotes?: string | null;
	parent?: (string | null) | Category;
	breadcrumbs?:
		| {
				doc?: (string | null) | Category;
				url?: string | null;
				label?: string | null;
				id?: string | null;
		  }[]
		| null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
	id: string;
	isImported?: boolean | null;
	alt?: string | null;
	caption?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	folder?: (string | null) | FolderInterface;
	updatedAt: string;
	createdAt: string;
	/**
	 * Cloudinary URL for imported assets
	 */
	url?: string | null;
	/**
	 * Thumbnail URL for imported assets
	 */
	thumbnailURL?: string | null;
	filename?: string | null;
	mimeType?: string | null;
	filesize?: number | null;
	width?: number | null;
	height?: number | null;
	focalX?: number | null;
	focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders".
 */
export interface FolderInterface {
	id: string;
	name: string;
	folder?: (string | null) | FolderInterface;
	documentsAndFolders?: {
		docs?: (
			| {
					relationTo?: 'folders';
					value: string | FolderInterface;
			  }
			| {
					relationTo?: 'media';
					value: string | Media;
			  }
		)[];
		hasNextPage?: boolean;
		totalDocs?: number;
	};
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
	id: string;
	name: string;
	info?: {
		summary?: string | null;
		quote?: string | null;
		quoteAuthor?: string | null;
		/**
		 * Related programme
		 */
		programme?: (string | null) | Category;
		/**
		 * Related topics
		 */
		topics?: (string | Category)[] | null;
		year?: string | null;
		/**
		 * Partners (until Partners collection is created)
		 */
		partnersList?:
			| {
					partner?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Funders (until Partners collection is created)
		 */
		fundersList?:
			| {
					funder?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Contracting authorities (until Partners collection is created)
		 */
		contractingAuthorityList?:
			| {
					authority?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * External project URL
		 */
		url?: string | null;
	};
	content?: {
		description?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Project thumbnail image
		 */
		thumbnail?: (string | null) | Media;
		/**
		 * Project gallery images
		 */
		gallery?:
			| {
					image?: (string | null) | Media;
					id?: string | null;
			  }[]
			| null;
	};
	relationships?: {
		/**
		 * Team members involved in this project
		 */
		team?: (string | Team)[] | null;
		/**
		 * Related videos
		 */
		videos?: (string | Video)[] | null;
		/**
		 * Related projects
		 */
		relatedProjects?: (string | Project)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	slug: string;
	/**
	 * Cloudinary URL for thumbnail (migration field)
	 */
	thumbnailFromCloudinary?: string | null;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams".
 */
export interface Team {
	id: string;
	name: string;
	position: string;
	picture?: (string | null) | LocalImage;
	bio?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	linkedin?: string | null;
	twitter?: string | null;
	email?: string | null;
	slug: string;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "local-images".
 */
export interface LocalImage {
	id: string;
	/**
	 * Alternative text for the image (important for accessibility)
	 */
	alt?: string | null;
	caption?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	updatedAt: string;
	createdAt: string;
	url?: string | null;
	thumbnailURL?: string | null;
	filename?: string | null;
	mimeType?: string | null;
	filesize?: number | null;
	width?: number | null;
	height?: number | null;
	focalX?: number | null;
	focalY?: number | null;
	sizes?: {
		thumbnail?: {
			url?: string | null;
			width?: number | null;
			height?: number | null;
			mimeType?: string | null;
			filesize?: number | null;
			filename?: string | null;
		};
		square?: {
			url?: string | null;
			width?: number | null;
			height?: number | null;
			mimeType?: string | null;
			filesize?: number | null;
			filename?: string | null;
		};
		medium?: {
			url?: string | null;
			width?: number | null;
			height?: number | null;
			mimeType?: string | null;
			filesize?: number | null;
			filename?: string | null;
		};
	};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
	id: string;
	title: string;
	date?: string | null;
	/**
	 * Rich text description from Contentful
	 */
	description?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	/**
	 * Automated news entry content from Contentful
	 */
	automatedNewsEntry?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	summary?: string | null;
	keywords?:
		| {
				keyword?: string | null;
				id?: string | null;
		  }[]
		| null;
	/**
	 * Video URL
	 */
	url: string;
	/**
	 * The unique identifier of the video on the platform (e.g., YouTube ID)
	 */
	videoId: string;
	/**
	 * Video thumbnail from Contentful
	 */
	image?: (string | null) | Media;
	/**
	 * Related programmes
	 */
	programmes?: (string | Category)[] | null;
	/**
	 * Project names (until Project collection is created)
	 */
	projects?:
		| {
				project?: string | null;
				id?: string | null;
		  }[]
		| null;
	/**
	 * Event series names (until EventSeries collection is created)
	 */
	eventSeries?:
		| {
				eventSeries?: string | null;
				id?: string | null;
		  }[]
		| null;
	slug: string;
	/**
	 * Original Contentful entry ID
	 */
	contentfulId?: string | null;
	/**
	 * Notes from the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news".
 */
export interface News {
	id: string;
	title: string;
	info: {
		/**
		 * Primary programme
		 */
		programme?: (string | null) | Category;
		/**
		 * Secondary programme (optional)
		 */
		secondProgramme?: (string | null) | Category;
		/**
		 * Related projects
		 */
		project?: (string | Project)[] | null;
		/**
		 * Article date from Contentful
		 */
		dateFormat?: string | null;
		type: 'Media Coverage' | 'Press Release' | 'News' | 'Publication' | 'Video';
		author?: string | null;
		/**
		 * TMG team members who authored this news
		 */
		authorTmg?: (string | Team)[] | null;
		summary?: string | null;
		source?: string | null;
		sourceUrl?: string | null;
	};
	content?: {
		image?: (string | null) | Media;
		description?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
	};
	relationships?: {
		/**
		 * Referenced publication
		 */
		publication?: (string | null) | Publication;
		externalPublicationThumbnail?: (string | null) | Media;
		externalPublicationUrl?: string | null;
		/**
		 * Related video
		 */
		video?: (string | null) | Video;
		/**
		 * Related news titles (will be linked later)
		 */
		relatedNews?:
			| {
					title?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Related publications
		 */
		relatedPublications?: (string | Publication)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
	};
	slug: string;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publications".
 */
export interface Publication {
	id: string;
	title: string;
	info: {
		category: string;
		/**
		 * Related programme
		 */
		programme?: (string | null) | Category;
		/**
		 * Related project
		 */
		project?: (string | null) | Project;
		author?: string | null;
		/**
		 * TMG team members who authored this publication
		 */
		authorTmg?: (string | Team)[] | null;
		publicationDate?: string | null;
		language?: ('en' | 'de' | 'fr') | null;
		summary?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
		doi?: boolean | null;
		doiNumber?: number | null;
		doiUrl?: string | null;
		citation?: string | null;
	};
	content?: {
		/**
		 * Generate a news entry for this publication (use Description field in extension below)
		 */
		generateNewsEntry?: boolean | null;
		description?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Publication thumbnail image
		 */
		thumbnail?: (string | null) | Media;
		/**
		 * Publication PDF document
		 */
		pdf?: (string | null) | Document;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	slug: string;
	/**
	 * Automated news entry content
	 */
	automatedNewsEntry?: string | null;
	/**
	 * Cloudinary URL for thumbnail (migration field)
	 */
	thumbnailFromCloudinary?: string | null;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
	id: string;
	/**
	 * Display title for the document
	 */
	title?: string | null;
	/**
	 * Brief description of the document
	 */
	description?: string | null;
	/**
	 * Auto-generated thumbnail path
	 */
	thumbnailPath?: string | null;
	/**
	 * Whether thumbnail was successfully generated
	 */
	thumbnailGenerated?: boolean | null;
	/**
	 * Original URL from Contentful (for migration tracking)
	 */
	originalUrl?: string | null;
	updatedAt: string;
	createdAt: string;
	url?: string | null;
	thumbnailURL?: string | null;
	filename?: string | null;
	mimeType?: string | null;
	filesize?: number | null;
	width?: number | null;
	height?: number | null;
	focalX?: number | null;
	focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
	id: string;
	title: string;
	info?: {
		type?: ('conference' | 'workshop' | 'discussion' | 'other') | null;
		programme?: (string | null) | Category;
		summary?: string | null;
		eventUrl?: string | null;
		isMultiLingual?: boolean | null;
		secondLanguage?: string | null;
		titleSecondLanguage?: string | null;
		language?:
			| {
					languageCode?: ('en' | 'de' | 'fr') | null;
					id?: string | null;
			  }[]
			| null;
		organiser?:
			| {
					name?: string | null;
					id?: string | null;
			  }[]
			| null;
	};
	content?: {
		topBanner?: (string | null) | Media;
		description?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		background?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		image?: (string | null) | Media;
		imagePosition?: ('Top' | 'Bottom') | null;
	};
	relationships?: {
		speakers?: (string | Speaker)[] | null;
		facilitators?: (string | Speaker)[] | null;
		video?: (string | null) | Video;
		relatedNews?: (string | News)[] | null;
		relatedEvents?: (string | Event)[] | null;
		relatedVideos?: (string | Video)[] | null;
		relatedDocuments?: (string | Publication)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
	};
	slug: string;
	date: string;
	endDate?: string | null;
	location?: string | null;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speakers".
 */
export interface Speaker {
	id: string;
	name: string;
	position?: string | null;
	organisation?: string | null;
	organisationUrl?: string | null;
	bio?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	picture?: (string | null) | LocalImage;
	twitter?: string | null;
	email?: string | null;
	slug: string;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
	id: string;
	title: string;
	hero: {
		type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
		richText?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		links?:
			| {
					link: {
						type?: ('reference' | 'custom') | null;
						newTab?: boolean | null;
						reference?:
							| ({
									relationTo: 'pages';
									value: string | Page;
							  } | null)
							| ({
									relationTo: 'posts';
									value: string | Post;
							  } | null)
							| ({
									relationTo: 'homepage';
									value: string | Homepage;
							  } | null)
							| ({
									relationTo: 'about';
									value: string | About;
							  } | null)
							| ({
									relationTo: 'news';
									value: string | News;
							  } | null)
							| ({
									relationTo: 'publications';
									value: string | Publication;
							  } | null)
							| ({
									relationTo: 'events';
									value: string | Event;
							  } | null);
						url?: string | null;
						label: string;
						/**
						 * Choose how the link should be rendered.
						 */
						appearance?: ('default' | 'outline') | null;
					};
					id?: string | null;
			  }[]
			| null;
		media?: (string | null) | Media;
	};
	layout: (
		| CallToActionBlock
		| ContentBlock
		| MediaBlock
		| ArchiveBlock
		| FormBlock
		| BannerBlock
	)[];
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
	id: string;
	title: string;
	description: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	};
	teamSectionText: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	};
	quote?: string | null;
	quoteAuthor?: string | null;
	quotePicture?: (string | null) | Media;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
	richText?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	links?:
		| {
				link: {
					type?: ('reference' | 'custom') | null;
					newTab?: boolean | null;
					reference?:
						| ({
								relationTo: 'pages';
								value: string | Page;
						  } | null)
						| ({
								relationTo: 'posts';
								value: string | Post;
						  } | null)
						| ({
								relationTo: 'homepage';
								value: string | Homepage;
						  } | null)
						| ({
								relationTo: 'about';
								value: string | About;
						  } | null)
						| ({
								relationTo: 'news';
								value: string | News;
						  } | null)
						| ({
								relationTo: 'publications';
								value: string | Publication;
						  } | null)
						| ({
								relationTo: 'events';
								value: string | Event;
						  } | null);
					url?: string | null;
					label: string;
					/**
					 * Choose how the link should be rendered.
					 */
					appearance?: ('default' | 'outline') | null;
				};
				id?: string | null;
		  }[]
		| null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
	columns?:
		| {
				size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
				richText?: {
					root: {
						type: string;
						children: {
							type: string;
							version: number;
							[k: string]: unknown;
						}[];
						direction: ('ltr' | 'rtl') | null;
						format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
						indent: number;
						version: number;
					};
					[k: string]: unknown;
				} | null;
				enableLink?: boolean | null;
				link?: {
					type?: ('reference' | 'custom') | null;
					newTab?: boolean | null;
					reference?:
						| ({
								relationTo: 'pages';
								value: string | Page;
						  } | null)
						| ({
								relationTo: 'posts';
								value: string | Post;
						  } | null)
						| ({
								relationTo: 'homepage';
								value: string | Homepage;
						  } | null)
						| ({
								relationTo: 'about';
								value: string | About;
						  } | null)
						| ({
								relationTo: 'news';
								value: string | News;
						  } | null)
						| ({
								relationTo: 'publications';
								value: string | Publication;
						  } | null)
						| ({
								relationTo: 'events';
								value: string | Event;
						  } | null);
					url?: string | null;
					label: string;
					/**
					 * Choose how the link should be rendered.
					 */
					appearance?: ('default' | 'outline') | null;
				};
				id?: string | null;
		  }[]
		| null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
	media: string | Media;
	id?: string | null;
	blockName?: string | null;
	blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
	introContent?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	populateBy?: ('collection' | 'selection') | null;
	relationTo?: 'posts' | null;
	categories?: (string | Category)[] | null;
	limit?: number | null;
	selectedDocs?:
		| {
				relationTo: 'posts';
				value: string | Post;
		  }[]
		| null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
	form: string | Form;
	enableIntro?: boolean | null;
	introContent?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	id?: string | null;
	blockName?: string | null;
	blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
	id: string;
	title: string;
	fields?:
		| (
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						required?: boolean | null;
						defaultValue?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'checkbox';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'country';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'email';
				  }
				| {
						message?: {
							root: {
								type: string;
								children: {
									type: string;
									version: number;
									[k: string]: unknown;
								}[];
								direction: ('ltr' | 'rtl') | null;
								format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
								indent: number;
								version: number;
							};
							[k: string]: unknown;
						} | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'message';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						defaultValue?: number | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'number';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						defaultValue?: string | null;
						placeholder?: string | null;
						options?:
							| {
									label: string;
									value: string;
									id?: string | null;
							  }[]
							| null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'select';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'state';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						defaultValue?: string | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'text';
				  }
				| {
						name: string;
						label?: string | null;
						width?: number | null;
						defaultValue?: string | null;
						required?: boolean | null;
						id?: string | null;
						blockName?: string | null;
						blockType: 'textarea';
				  }
		  )[]
		| null;
	submitButtonLabel?: string | null;
	/**
	 * Choose whether to display an on-page message or redirect to a different page after they submit the form.
	 */
	confirmationType?: ('message' | 'redirect') | null;
	confirmationMessage?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	redirect?: {
		url: string;
	};
	/**
	 * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
	 */
	emails?:
		| {
				emailTo?: string | null;
				cc?: string | null;
				bcc?: string | null;
				replyTo?: string | null;
				emailFrom?: string | null;
				subject: string;
				/**
				 * Enter the message that should be sent in this email.
				 */
				message?: {
					root: {
						type: string;
						children: {
							type: string;
							version: number;
							[k: string]: unknown;
						}[];
						direction: ('ltr' | 'rtl') | null;
						format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
						indent: number;
						version: number;
					};
					[k: string]: unknown;
				} | null;
				id?: string | null;
		  }[]
		| null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
	style: 'info' | 'warning' | 'error' | 'success';
	content: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	};
	id?: string | null;
	blockName?: string | null;
	blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners".
 */
export interface Banner {
	id: string;
	title: string;
	/**
	 * Select the type of banner
	 */
	type: 'newsletter' | 'publication' | 'event' | 'generic';
	subtitle?: string | null;
	richText?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	/**
	 * Upload a background image or video
	 */
	backgroundMedia?: (string | null) | Media;
	/**
	 * Enter a hex color value (e.g., #FFFFFF)
	 */
	backgroundColor?: string | null;
	image?:
		| {
				image: string | Media;
				id?: string | null;
		  }[]
		| null;
	publications?: (string | Publication)[] | null;
	events?: (string | Event)[] | null;
	link?: {
		link: {
			type?: ('reference' | 'custom') | null;
			newTab?: boolean | null;
			reference?:
				| ({
						relationTo: 'pages';
						value: string | Page;
				  } | null)
				| ({
						relationTo: 'posts';
						value: string | Post;
				  } | null)
				| ({
						relationTo: 'homepage';
						value: string | Homepage;
				  } | null)
				| ({
						relationTo: 'about';
						value: string | About;
				  } | null)
				| ({
						relationTo: 'news';
						value: string | News;
				  } | null)
				| ({
						relationTo: 'publications';
						value: string | Publication;
				  } | null)
				| ({
						relationTo: 'events';
						value: string | Event;
				  } | null);
			url?: string | null;
			label: string;
			/**
			 * Choose how the link should be rendered.
			 */
			appearance?: ('default' | 'outline') | null;
		};
	};
	publishedAt?: string | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events-page".
 */
export interface EventsPage {
	id: string;
	title: string;
	featuredEvents?: (string | Event)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-page".
 */
export interface BlogPage {
	id: string;
	title: string;
	featuredPosts?: (string | Post)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs-page".
 */
export interface JobsPage {
	id: string;
	title: string;
	featuredJobs?: (string | Job)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs".
 */
export interface Job {
	id: string;
	title: string;
	applicationFile?: (string | null) | Media;
	applicationLink?: string | null;
	deadlineDate?: string | null;
	url?: string | null;
	summary?: {
		root: {
			type: string;
			children: {
				type: string;
				version: number;
				[k: string]: unknown;
			}[];
			direction: ('ltr' | 'rtl') | null;
			format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
			indent: number;
			version: number;
		};
		[k: string]: unknown;
	} | null;
	category?: ('Job' | 'Consultancy') | null;
	/**
	 * Date when the job was posted
	 */
	date?: string | null;
	slug: string;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-page".
 */
export interface NewsPage {
	id: string;
	title: string;
	featuredNews?: (string | News)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publications-page".
 */
export interface PublicationsPage {
	id: string;
	title: string;
	featuredPublication?: (string | null) | Publication;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-page".
 */
export interface VideosPage {
	id: string;
	title: string;
	featuredVideos?: (string | Video)[] | null;
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	publishedAt?: string | null;
	slug?: string | null;
	slugLock?: boolean | null;
	updatedAt: string;
	createdAt: string;
	_status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publication-features".
 */
export interface PublicationFeature {
	id: string;
	title: string;
	info: {
		summary: string;
		/**
		 * Display this publication feature on the homepage
		 */
		featuredOnHomepage?: boolean | null;
		/**
		 * Date until which this item is featured (if featuredOnHomepage is true)
		 */
		cutoffDate?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Primary color for theme
		 */
		color1?: string | null;
		/**
		 * Secondary color for theme
		 */
		color2?: string | null;
	};
	content?: {
		/**
		 * Content sections with text, images, and embedded content
		 */
		sections?:
			| {
					contentBlocks?:
						| {
								blockType: 'textBlock' | 'textBoxBlock' | 'imageBlock' | 'banners';
								title?: string | null;
								subtitle?: string | null;
								text?: {
									root: {
										type: string;
										children: {
											type: string;
											version: number;
											[k: string]: unknown;
										}[];
										direction: ('ltr' | 'rtl') | null;
										format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
										indent: number;
										version: number;
									};
									[k: string]: unknown;
								} | null;
								embedContent?: boolean | null;
								/**
								 * HTML iframe code for embedded content
								 */
								iFrameCode?: string | null;
								image?: (string | null) | Media;
								publications?: (string | Publication)[] | null;
								buttonText?: string | null;
								buttonPath?: string | null;
								id?: string | null;
						  }[]
						| null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Main page banner image
		 */
		pageBanner?: (string | null) | Media;
		/**
		 * Feature image (for listings)
		 */
		image?: (string | null) | Media;
		/**
		 * Image gallery
		 */
		gallery?: (string | Media)[] | null;
	};
	relationships?: {
		/**
		 * Related events
		 */
		events?: (string | Event)[] | null;
		/**
		 * Related news articles
		 */
		news?: (string | News)[] | null;
		/**
		 * Related publications/documents
		 */
		relatedDocuments?: (string | Publication)[] | null;
		/**
		 * Partner logos
		 */
		partnersLogos?: (string | Media)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	slug: string;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-series".
 */
export interface EventSery {
	id: string;
	title: string;
	info: {
		summary: string;
		/**
		 * Display this event series on the homepage
		 */
		featuredOnHomepage?: boolean | null;
		/**
		 * Date until which this item is featured (if featuredOnHomepage is true)
		 */
		cutoffDate?: string | null;
		keywords?:
			| {
					keyword?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Title for the statistics section
		 */
		statsTitle?: string | null;
		/**
		 * Number of events in this series
		 */
		statsEvents?: number | null;
		/**
		 * Number of speakers in this series
		 */
		statsSpeakers?: number | null;
		/**
		 * Primary theme color
		 */
		color1?: string | null;
		/**
		 * Secondary theme color
		 */
		color2?: string | null;
	};
	content?: {
		/**
		 * Main description of the event series
		 */
		description?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Quote text for featured quote section
		 */
		quoteText?: string | null;
		/**
		 * Person who said the quote
		 */
		quotePerson?: string | null;
		/**
		 * Organization of the quote person
		 */
		quotePersonOrganization?: string | null;
		/**
		 * Additional text section 2
		 */
		text2?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Additional text section 3
		 */
		text3?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Additional text section 4
		 */
		text4?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		/**
		 * Main image for listings and cards
		 */
		image?: (string | null) | Media;
		/**
		 * Page banner image
		 */
		pageBanner?: (string | null) | Media;
		/**
		 * Image gallery for the event series
		 */
		gallery?: (string | Media)[] | null;
	};
	relationships?: {
		/**
		 * Featured event for this series
		 */
		eventFeatured?: (string | null) | Event;
		/**
		 * Events that are part of this series
		 */
		events?: (string | Event)[] | null;
		/**
		 * Related news articles
		 */
		news?: (string | News)[] | null;
		/**
		 * Related publications/documents
		 */
		relatedDocuments?: (string | Publication)[] | null;
		/**
		 * Additional events from partners and network
		 */
		additionalEvents?: (string | Event)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	slug: string;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "initiatives".
 */
export interface Initiative {
	id: string;
	title: string;
	info?: {
		summary?: string | null;
		/**
		 * Partners (until Partners collection is created)
		 */
		partners?:
			| {
					partner?: string | null;
					id?: string | null;
			  }[]
			| null;
		/**
		 * Primary color for the initiative
		 */
		color1?: string | null;
		/**
		 * Secondary color for the initiative
		 */
		color2?: string | null;
	};
	content?: {
		/**
		 * Page banner image
		 */
		pageBanner?: (string | null) | Media;
		section1Heading?: string | null;
		section1Image?: (string | null) | Media;
		text1?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		section2Heading?: string | null;
		section2Image?: (string | null) | Media;
		text2?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		section3Heading?: string | null;
		section3Image?: (string | null) | Media;
		text3?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		section4Heading?: string | null;
		section4Image?: (string | null) | Media;
		text4?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		section5Heading?: string | null;
		section5Image?: (string | null) | Media;
		text5?: {
			root: {
				type: string;
				children: {
					type: string;
					version: number;
					[k: string]: unknown;
				}[];
				direction: ('ltr' | 'rtl') | null;
				format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
				indent: number;
				version: number;
			};
			[k: string]: unknown;
		} | null;
		slidesHeading?: string | null;
		/**
		 * Initiative slides
		 */
		slides?:
			| {
					image?: (string | null) | Media;
					id?: string | null;
			  }[]
			| null;
		galleryText?: string | null;
		/**
		 * Initiative gallery images
		 */
		gallery?:
			| {
					image?: (string | null) | Media;
					id?: string | null;
			  }[]
			| null;
		quoteText?: string | null;
		quotePerson?: string | null;
		quotePersonOrganization?: string | null;
		quote2Text?: string | null;
		quote2Person?: string | null;
		quote2PersonOrganization?: string | null;
		quote3Text?: string | null;
		quote3Person?: string | null;
		quote3PersonOrganization?: string | null;
		quote4Text?: string | null;
		quote4Person?: string | null;
		quote4PersonOrganization?: string | null;
		quote5Text?: string | null;
		quote5Person?: string | null;
		quote5PersonOrganization?: string | null;
		/**
		 * Quote pictures
		 */
		quotesPictures?:
			| {
					image?: (string | null) | Media;
					id?: string | null;
			  }[]
			| null;
		videoTitle?: string | null;
		/**
		 * Featured video
		 */
		videoItem?: (string | null) | Video;
	};
	relationships?: {
		/**
		 * Related events
		 */
		events?: (string | Event)[] | null;
		/**
		 * Related news
		 */
		news?: (string | News)[] | null;
		/**
		 * Related publications
		 */
		publications?: (string | Publication)[] | null;
	};
	meta?: {
		title?: string | null;
		/**
		 * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
		 */
		image?: (string | null) | Media;
		description?: string | null;
	};
	slug: string;
	/**
	 * Cloudinary URL for page banner (migration field)
	 */
	pageBannerFromCloudinary?: string | null;
	/**
	 * Original Contentful entry ID (for migration tracking)
	 */
	contentfulId?: string | null;
	/**
	 * Notes about the migration process
	 */
	migrationNotes?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "collaborators".
 */
export interface Collaborator {
	id: string;
	type: 'partner' | 'funder' | 'network' | 'contracting-authority';
	name: string;
	logo?: (string | null) | Media;
	/**
	 * URL to the partner website
	 */
	url?: string | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
	id: string;
	name?: string | null;
	updatedAt: string;
	createdAt: string;
	email: string;
	resetPasswordToken?: string | null;
	resetPasswordExpiration?: string | null;
	salt?: string | null;
	hash?: string | null;
	loginAttempts?: number | null;
	lockUntil?: string | null;
	password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
	id: string;
	/**
	 * You will need to rebuild the website when changing this field.
	 */
	from: string;
	to?: {
		type?: ('reference' | 'custom') | null;
		reference?:
			| ({
					relationTo: 'pages';
					value: string | Page;
			  } | null)
			| ({
					relationTo: 'posts';
					value: string | Post;
			  } | null);
		url?: string | null;
	};
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
	id: string;
	form: string | Form;
	submissionData?:
		| {
				field: string;
				value: string;
				id?: string | null;
		  }[]
		| null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
	id: string;
	title?: string | null;
	priority?: number | null;
	doc: {
		relationTo: 'posts';
		value: string | Post;
	};
	slug?: string | null;
	meta?: {
		title?: string | null;
		description?: string | null;
		image?: (string | null) | Media;
	};
	categories?:
		| {
				relationTo?: string | null;
				id?: string | null;
				title?: string | null;
		  }[]
		| null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
	id: string;
	/**
	 * Input data provided to the job
	 */
	input?:
		| {
				[k: string]: unknown;
		  }
		| unknown[]
		| string
		| number
		| boolean
		| null;
	taskStatus?:
		| {
				[k: string]: unknown;
		  }
		| unknown[]
		| string
		| number
		| boolean
		| null;
	completedAt?: string | null;
	totalTried?: number | null;
	/**
	 * If hasError is true this job will not be retried
	 */
	hasError?: boolean | null;
	/**
	 * If hasError is true, this is the error that caused it
	 */
	error?:
		| {
				[k: string]: unknown;
		  }
		| unknown[]
		| string
		| number
		| boolean
		| null;
	/**
	 * Task execution log
	 */
	log?:
		| {
				executedAt: string;
				completedAt: string;
				taskSlug: 'inline' | 'schedulePublish';
				taskID: string;
				input?:
					| {
							[k: string]: unknown;
					  }
					| unknown[]
					| string
					| number
					| boolean
					| null;
				output?:
					| {
							[k: string]: unknown;
					  }
					| unknown[]
					| string
					| number
					| boolean
					| null;
				state: 'failed' | 'succeeded';
				error?:
					| {
							[k: string]: unknown;
					  }
					| unknown[]
					| string
					| number
					| boolean
					| null;
				id?: string | null;
		  }[]
		| null;
	taskSlug?: ('inline' | 'schedulePublish') | null;
	queue?: string | null;
	waitUntil?: string | null;
	processing?: boolean | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
	id: string;
	document?:
		| ({
				relationTo: 'homepage';
				value: string | Homepage;
		  } | null)
		| ({
				relationTo: 'about';
				value: string | About;
		  } | null)
		| ({
				relationTo: 'events-page';
				value: string | EventsPage;
		  } | null)
		| ({
				relationTo: 'blog-page';
				value: string | BlogPage;
		  } | null)
		| ({
				relationTo: 'jobs-page';
				value: string | JobsPage;
		  } | null)
		| ({
				relationTo: 'news-page';
				value: string | NewsPage;
		  } | null)
		| ({
				relationTo: 'publications-page';
				value: string | PublicationsPage;
		  } | null)
		| ({
				relationTo: 'publications';
				value: string | Publication;
		  } | null)
		| ({
				relationTo: 'videos-page';
				value: string | VideosPage;
		  } | null)
		| ({
				relationTo: 'publication-features';
				value: string | PublicationFeature;
		  } | null)
		| ({
				relationTo: 'event-series';
				value: string | EventSery;
		  } | null)
		| ({
				relationTo: 'projects';
				value: string | Project;
		  } | null)
		| ({
				relationTo: 'initiatives';
				value: string | Initiative;
		  } | null)
		| ({
				relationTo: 'events';
				value: string | Event;
		  } | null)
		| ({
				relationTo: 'speakers';
				value: string | Speaker;
		  } | null)
		| ({
				relationTo: 'news';
				value: string | News;
		  } | null)
		| ({
				relationTo: 'banners';
				value: string | Banner;
		  } | null)
		| ({
				relationTo: 'pages';
				value: string | Page;
		  } | null)
		| ({
				relationTo: 'posts';
				value: string | Post;
		  } | null)
		| ({
				relationTo: 'categories';
				value: string | Category;
		  } | null)
		| ({
				relationTo: 'collaborators';
				value: string | Collaborator;
		  } | null)
		| ({
				relationTo: 'jobs';
				value: string | Job;
		  } | null)
		| ({
				relationTo: 'teams';
				value: string | Team;
		  } | null)
		| ({
				relationTo: 'documents';
				value: string | Document;
		  } | null)
		| ({
				relationTo: 'media';
				value: string | Media;
		  } | null)
		| ({
				relationTo: 'local-images';
				value: string | LocalImage;
		  } | null)
		| ({
				relationTo: 'videos';
				value: string | Video;
		  } | null)
		| ({
				relationTo: 'users';
				value: string | User;
		  } | null)
		| ({
				relationTo: 'redirects';
				value: string | Redirect;
		  } | null)
		| ({
				relationTo: 'forms';
				value: string | Form;
		  } | null)
		| ({
				relationTo: 'form-submissions';
				value: string | FormSubmission;
		  } | null)
		| ({
				relationTo: 'search';
				value: string | Search;
		  } | null)
		| ({
				relationTo: 'folders';
				value: string | FolderInterface;
		  } | null)
		| ({
				relationTo: 'payload-jobs';
				value: string | PayloadJob;
		  } | null);
	globalSlug?: string | null;
	user: {
		relationTo: 'users';
		value: string | User;
	};
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
	id: string;
	user: {
		relationTo: 'users';
		value: string | User;
	};
	key?: string | null;
	value?:
		| {
				[k: string]: unknown;
		  }
		| unknown[]
		| string
		| number
		| boolean
		| null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
	id: string;
	name?: string | null;
	batch?: number | null;
	updatedAt: string;
	createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
	title?: T;
	hero?:
		| T
		| {
				featuredContent?: T;
				title?: T;
				subtitle?: T;
				richText?: T;
				media?: T;
				backgroundMedia?: T;
				backgroundColor?: T;
				maintainAspectRatio?: T;
		  };
	latestSectionTitle?: T;
	latestSectionSubtitle?: T;
	featuredItems?: T;
	programmeSectionTitle?: T;
	eventSectionTitle?: T;
	eventSectionSubtitle?: T;
	eventSeriesBanner?: T;
	blogSectionTitle?: T;
	blogSectionSubtitle?: T;
	newsletterBanner?: T;
	networksSectionTitle?: T;
	networksSectionSubtitle?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about_select".
 */
export interface AboutSelect<T extends boolean = true> {
	title?: T;
	description?: T;
	teamSectionText?: T;
	quote?: T;
	quoteAuthor?: T;
	quotePicture?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events-page_select".
 */
export interface EventsPageSelect<T extends boolean = true> {
	title?: T;
	featuredEvents?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-page_select".
 */
export interface BlogPageSelect<T extends boolean = true> {
	title?: T;
	featuredPosts?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs-page_select".
 */
export interface JobsPageSelect<T extends boolean = true> {
	title?: T;
	featuredJobs?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-page_select".
 */
export interface NewsPageSelect<T extends boolean = true> {
	title?: T;
	featuredNews?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publications-page_select".
 */
export interface PublicationsPageSelect<T extends boolean = true> {
	title?: T;
	featuredPublication?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publications_select".
 */
export interface PublicationsSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				category?: T;
				programme?: T;
				project?: T;
				author?: T;
				authorTmg?: T;
				publicationDate?: T;
				language?: T;
				summary?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
				doi?: T;
				doiNumber?: T;
				doiUrl?: T;
				citation?: T;
		  };
	content?:
		| T
		| {
				generateNewsEntry?: T;
				description?: T;
				thumbnail?: T;
				pdf?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	slug?: T;
	automatedNewsEntry?: T;
	thumbnailFromCloudinary?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-page_select".
 */
export interface VideosPageSelect<T extends boolean = true> {
	title?: T;
	featuredVideos?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publication-features_select".
 */
export interface PublicationFeaturesSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				summary?: T;
				featuredOnHomepage?: T;
				cutoffDate?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
				color1?: T;
				color2?: T;
		  };
	content?:
		| T
		| {
				sections?:
					| T
					| {
							contentBlocks?:
								| T
								| {
										blockType?: T;
										title?: T;
										subtitle?: T;
										text?: T;
										embedContent?: T;
										iFrameCode?: T;
										image?: T;
										publications?: T;
										buttonText?: T;
										buttonPath?: T;
										id?: T;
								  };
							id?: T;
					  };
				pageBanner?: T;
				image?: T;
				gallery?: T;
		  };
	relationships?:
		| T
		| {
				events?: T;
				news?: T;
				relatedDocuments?: T;
				partnersLogos?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	slug?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-series_select".
 */
export interface EventSeriesSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				summary?: T;
				featuredOnHomepage?: T;
				cutoffDate?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
				statsTitle?: T;
				statsEvents?: T;
				statsSpeakers?: T;
				color1?: T;
				color2?: T;
		  };
	content?:
		| T
		| {
				description?: T;
				quoteText?: T;
				quotePerson?: T;
				quotePersonOrganization?: T;
				text2?: T;
				text3?: T;
				text4?: T;
				image?: T;
				pageBanner?: T;
				gallery?: T;
		  };
	relationships?:
		| T
		| {
				eventFeatured?: T;
				events?: T;
				news?: T;
				relatedDocuments?: T;
				additionalEvents?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	slug?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
	name?: T;
	info?:
		| T
		| {
				summary?: T;
				quote?: T;
				quoteAuthor?: T;
				programme?: T;
				topics?: T;
				year?: T;
				partnersList?:
					| T
					| {
							partner?: T;
							id?: T;
					  };
				fundersList?:
					| T
					| {
							funder?: T;
							id?: T;
					  };
				contractingAuthorityList?:
					| T
					| {
							authority?: T;
							id?: T;
					  };
				url?: T;
		  };
	content?:
		| T
		| {
				description?: T;
				thumbnail?: T;
				gallery?:
					| T
					| {
							image?: T;
							id?: T;
					  };
		  };
	relationships?:
		| T
		| {
				team?: T;
				videos?: T;
				relatedProjects?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	slug?: T;
	thumbnailFromCloudinary?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "initiatives_select".
 */
export interface InitiativesSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				summary?: T;
				partners?:
					| T
					| {
							partner?: T;
							id?: T;
					  };
				color1?: T;
				color2?: T;
		  };
	content?:
		| T
		| {
				pageBanner?: T;
				section1Heading?: T;
				section1Image?: T;
				text1?: T;
				section2Heading?: T;
				section2Image?: T;
				text2?: T;
				section3Heading?: T;
				section3Image?: T;
				text3?: T;
				section4Heading?: T;
				section4Image?: T;
				text4?: T;
				section5Heading?: T;
				section5Image?: T;
				text5?: T;
				slidesHeading?: T;
				slides?:
					| T
					| {
							image?: T;
							id?: T;
					  };
				galleryText?: T;
				gallery?:
					| T
					| {
							image?: T;
							id?: T;
					  };
				quoteText?: T;
				quotePerson?: T;
				quotePersonOrganization?: T;
				quote2Text?: T;
				quote2Person?: T;
				quote2PersonOrganization?: T;
				quote3Text?: T;
				quote3Person?: T;
				quote3PersonOrganization?: T;
				quote4Text?: T;
				quote4Person?: T;
				quote4PersonOrganization?: T;
				quote5Text?: T;
				quote5Person?: T;
				quote5PersonOrganization?: T;
				quotesPictures?:
					| T
					| {
							image?: T;
							id?: T;
					  };
				videoTitle?: T;
				videoItem?: T;
		  };
	relationships?:
		| T
		| {
				events?: T;
				news?: T;
				publications?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	slug?: T;
	pageBannerFromCloudinary?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				type?: T;
				programme?: T;
				summary?: T;
				eventUrl?: T;
				isMultiLingual?: T;
				secondLanguage?: T;
				titleSecondLanguage?: T;
				language?:
					| T
					| {
							languageCode?: T;
							id?: T;
					  };
				organiser?:
					| T
					| {
							name?: T;
							id?: T;
					  };
		  };
	content?:
		| T
		| {
				topBanner?: T;
				description?: T;
				background?: T;
				image?: T;
				imagePosition?: T;
		  };
	relationships?:
		| T
		| {
				speakers?: T;
				facilitators?: T;
				video?: T;
				relatedNews?: T;
				relatedEvents?: T;
				relatedVideos?: T;
				relatedDocuments?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
		  };
	slug?: T;
	date?: T;
	endDate?: T;
	location?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speakers_select".
 */
export interface SpeakersSelect<T extends boolean = true> {
	name?: T;
	position?: T;
	organisation?: T;
	organisationUrl?: T;
	bio?: T;
	picture?: T;
	twitter?: T;
	email?: T;
	slug?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news_select".
 */
export interface NewsSelect<T extends boolean = true> {
	title?: T;
	info?:
		| T
		| {
				programme?: T;
				secondProgramme?: T;
				project?: T;
				dateFormat?: T;
				type?: T;
				author?: T;
				authorTmg?: T;
				summary?: T;
				source?: T;
				sourceUrl?: T;
		  };
	content?:
		| T
		| {
				image?: T;
				description?: T;
		  };
	relationships?:
		| T
		| {
				publication?: T;
				externalPublicationThumbnail?: T;
				externalPublicationUrl?: T;
				video?: T;
				relatedNews?:
					| T
					| {
							title?: T;
							id?: T;
					  };
				relatedPublications?: T;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
		  };
	slug?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners_select".
 */
export interface BannersSelect<T extends boolean = true> {
	title?: T;
	type?: T;
	subtitle?: T;
	richText?: T;
	backgroundMedia?: T;
	backgroundColor?: T;
	image?:
		| T
		| {
				image?: T;
				id?: T;
		  };
	publications?: T;
	events?: T;
	link?:
		| T
		| {
				link?:
					| T
					| {
							type?: T;
							newTab?: T;
							reference?: T;
							url?: T;
							label?: T;
							appearance?: T;
					  };
		  };
	publishedAt?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
	title?: T;
	hero?:
		| T
		| {
				type?: T;
				richText?: T;
				links?:
					| T
					| {
							link?:
								| T
								| {
										type?: T;
										newTab?: T;
										reference?: T;
										url?: T;
										label?: T;
										appearance?: T;
								  };
							id?: T;
					  };
				media?: T;
		  };
	layout?:
		| T
		| {
				cta?: T | CallToActionBlockSelect<T>;
				content?: T | ContentBlockSelect<T>;
				mediaBlock?: T | MediaBlockSelect<T>;
				archive?: T | ArchiveBlockSelect<T>;
				formBlock?: T | FormBlockSelect<T>;
				bannerBlock?: T | BannerBlockSelect<T>;
		  };
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
	richText?: T;
	links?:
		| T
		| {
				link?:
					| T
					| {
							type?: T;
							newTab?: T;
							reference?: T;
							url?: T;
							label?: T;
							appearance?: T;
					  };
				id?: T;
		  };
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
	columns?:
		| T
		| {
				size?: T;
				richText?: T;
				enableLink?: T;
				link?:
					| T
					| {
							type?: T;
							newTab?: T;
							reference?: T;
							url?: T;
							label?: T;
							appearance?: T;
					  };
				id?: T;
		  };
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
	media?: T;
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
	introContent?: T;
	populateBy?: T;
	relationTo?: T;
	categories?: T;
	limit?: T;
	selectedDocs?: T;
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
	form?: T;
	enableIntro?: T;
	introContent?: T;
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock_select".
 */
export interface BannerBlockSelect<T extends boolean = true> {
	useExistingBanner?: T;
	existingBanner?: T;
	customBanner?:
		| T
		| {
				title?: T;
				subtitle?: T;
				richText?: T;
				backgroundMedia?: T;
				backgroundColor?: T;
				link?:
					| T
					| {
							link?:
								| T
								| {
										type?: T;
										newTab?: T;
										reference?: T;
										url?: T;
										label?: T;
										appearance?: T;
								  };
					  };
				buttonText?: T;
				buttonPath?: T;
		  };
	id?: T;
	blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
	title?: T;
	Info?:
		| T
		| {
				programme?: T;
				secondProgramme?: T;
				project?: T;
				dateFormat?: T;
				summary?: T;
				date?: T;
				keywords?:
					| T
					| {
							keyword?: T;
							id?: T;
					  };
				source?: T;
				sourceUrl?: T;
		  };
	heroImage?: T;
	content?: T;
	relatedPosts?: T;
	relatedNews?: T;
	relatedPublications?: T;
	video?: T;
	categories?: T;
	meta?:
		| T
		| {
				title?: T;
				image?: T;
				description?: T;
		  };
	publishedAt?: T;
	authors?:
		| T
		| {
				authorType?: T;
				teamMember?: T;
				externalAuthor?: T;
				id?: T;
		  };
	populatedAuthors?:
		| T
		| {
				id?: T;
				name?: T;
				type?: T;
		  };
	contentfulId?: T;
	migrationNotes?: T;
	imageFromCloudinary?: T;
	hasEmbeddedAssets?: T;
	embeddedAssetsInfo?: T;
	slug?: T;
	slugLock?: T;
	updatedAt?: T;
	createdAt?: T;
	_status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
	title?: T;
	type?: T;
	actionVerb?: T;
	subtitle?: T;
	description?: T;
	summary?: T;
	descriptionIntro?: T;
	bannerImage?: T;
	quote?: T;
	quoteAuthor?: T;
	topics?: T;
	slug?: T;
	slugLock?: T;
	contentfulId?: T;
	migrationNotes?: T;
	parent?: T;
	breadcrumbs?:
		| T
		| {
				doc?: T;
				url?: T;
				label?: T;
				id?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "collaborators_select".
 */
export interface CollaboratorsSelect<T extends boolean = true> {
	type?: T;
	name?: T;
	logo?: T;
	url?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs_select".
 */
export interface JobsSelect<T extends boolean = true> {
	title?: T;
	applicationFile?: T;
	applicationLink?: T;
	deadlineDate?: T;
	url?: T;
	summary?: T;
	category?: T;
	date?: T;
	slug?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams_select".
 */
export interface TeamsSelect<T extends boolean = true> {
	name?: T;
	position?: T;
	picture?: T;
	bio?: T;
	linkedin?: T;
	twitter?: T;
	email?: T;
	slug?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
	title?: T;
	description?: T;
	thumbnailPath?: T;
	thumbnailGenerated?: T;
	originalUrl?: T;
	updatedAt?: T;
	createdAt?: T;
	url?: T;
	thumbnailURL?: T;
	filename?: T;
	mimeType?: T;
	filesize?: T;
	width?: T;
	height?: T;
	focalX?: T;
	focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
	isImported?: T;
	alt?: T;
	caption?: T;
	folder?: T;
	updatedAt?: T;
	createdAt?: T;
	url?: T;
	thumbnailURL?: T;
	filename?: T;
	mimeType?: T;
	filesize?: T;
	width?: T;
	height?: T;
	focalX?: T;
	focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "local-images_select".
 */
export interface LocalImagesSelect<T extends boolean = true> {
	alt?: T;
	caption?: T;
	updatedAt?: T;
	createdAt?: T;
	url?: T;
	thumbnailURL?: T;
	filename?: T;
	mimeType?: T;
	filesize?: T;
	width?: T;
	height?: T;
	focalX?: T;
	focalY?: T;
	sizes?:
		| T
		| {
				thumbnail?:
					| T
					| {
							url?: T;
							width?: T;
							height?: T;
							mimeType?: T;
							filesize?: T;
							filename?: T;
					  };
				square?:
					| T
					| {
							url?: T;
							width?: T;
							height?: T;
							mimeType?: T;
							filesize?: T;
							filename?: T;
					  };
				medium?:
					| T
					| {
							url?: T;
							width?: T;
							height?: T;
							mimeType?: T;
							filesize?: T;
							filename?: T;
					  };
		  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos_select".
 */
export interface VideosSelect<T extends boolean = true> {
	title?: T;
	date?: T;
	description?: T;
	automatedNewsEntry?: T;
	summary?: T;
	keywords?:
		| T
		| {
				keyword?: T;
				id?: T;
		  };
	url?: T;
	videoId?: T;
	image?: T;
	programmes?: T;
	projects?:
		| T
		| {
				project?: T;
				id?: T;
		  };
	eventSeries?:
		| T
		| {
				eventSeries?: T;
				id?: T;
		  };
	slug?: T;
	contentfulId?: T;
	migrationNotes?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
	name?: T;
	updatedAt?: T;
	createdAt?: T;
	email?: T;
	resetPasswordToken?: T;
	resetPasswordExpiration?: T;
	salt?: T;
	hash?: T;
	loginAttempts?: T;
	lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
	from?: T;
	to?:
		| T
		| {
				type?: T;
				reference?: T;
				url?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
	title?: T;
	fields?:
		| T
		| {
				checkbox?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							required?: T;
							defaultValue?: T;
							id?: T;
							blockName?: T;
					  };
				country?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
				email?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
				message?:
					| T
					| {
							message?: T;
							id?: T;
							blockName?: T;
					  };
				number?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							defaultValue?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
				select?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							defaultValue?: T;
							placeholder?: T;
							options?:
								| T
								| {
										label?: T;
										value?: T;
										id?: T;
								  };
							required?: T;
							id?: T;
							blockName?: T;
					  };
				state?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
				text?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							defaultValue?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
				textarea?:
					| T
					| {
							name?: T;
							label?: T;
							width?: T;
							defaultValue?: T;
							required?: T;
							id?: T;
							blockName?: T;
					  };
		  };
	submitButtonLabel?: T;
	confirmationType?: T;
	confirmationMessage?: T;
	redirect?:
		| T
		| {
				url?: T;
		  };
	emails?:
		| T
		| {
				emailTo?: T;
				cc?: T;
				bcc?: T;
				replyTo?: T;
				emailFrom?: T;
				subject?: T;
				message?: T;
				id?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
	form?: T;
	submissionData?:
		| T
		| {
				field?: T;
				value?: T;
				id?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
	title?: T;
	priority?: T;
	doc?: T;
	slug?: T;
	meta?:
		| T
		| {
				title?: T;
				description?: T;
				image?: T;
		  };
	categories?:
		| T
		| {
				relationTo?: T;
				id?: T;
				title?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders_select".
 */
export interface FoldersSelect<T extends boolean = true> {
	name?: T;
	folder?: T;
	documentsAndFolders?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
	input?: T;
	taskStatus?: T;
	completedAt?: T;
	totalTried?: T;
	hasError?: T;
	error?: T;
	log?:
		| T
		| {
				executedAt?: T;
				completedAt?: T;
				taskSlug?: T;
				taskID?: T;
				input?: T;
				output?: T;
				state?: T;
				error?: T;
				id?: T;
		  };
	taskSlug?: T;
	queue?: T;
	waitUntil?: T;
	processing?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
	document?: T;
	globalSlug?: T;
	user?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
	user?: T;
	key?: T;
	value?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
	name?: T;
	batch?: T;
	updatedAt?: T;
	createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
	id: string;
	navItems?:
		| {
				link: {
					type?: ('reference' | 'custom') | null;
					newTab?: boolean | null;
					reference?:
						| ({
								relationTo: 'pages';
								value: string | Page;
						  } | null)
						| ({
								relationTo: 'posts';
								value: string | Post;
						  } | null)
						| ({
								relationTo: 'homepage';
								value: string | Homepage;
						  } | null)
						| ({
								relationTo: 'about';
								value: string | About;
						  } | null)
						| ({
								relationTo: 'news';
								value: string | News;
						  } | null)
						| ({
								relationTo: 'publications';
								value: string | Publication;
						  } | null)
						| ({
								relationTo: 'events';
								value: string | Event;
						  } | null);
					url?: string | null;
					label: string;
				};
				id?: string | null;
		  }[]
		| null;
	updatedAt?: string | null;
	createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
	id: string;
	navItems?:
		| {
				link: {
					type?: ('reference' | 'custom') | null;
					newTab?: boolean | null;
					reference?:
						| ({
								relationTo: 'pages';
								value: string | Page;
						  } | null)
						| ({
								relationTo: 'posts';
								value: string | Post;
						  } | null)
						| ({
								relationTo: 'homepage';
								value: string | Homepage;
						  } | null)
						| ({
								relationTo: 'about';
								value: string | About;
						  } | null)
						| ({
								relationTo: 'news';
								value: string | News;
						  } | null)
						| ({
								relationTo: 'publications';
								value: string | Publication;
						  } | null)
						| ({
								relationTo: 'events';
								value: string | Event;
						  } | null);
					url?: string | null;
					label: string;
				};
				id?: string | null;
		  }[]
		| null;
	updatedAt?: string | null;
	createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
	navItems?:
		| T
		| {
				link?:
					| T
					| {
							type?: T;
							newTab?: T;
							reference?: T;
							url?: T;
							label?: T;
					  };
				id?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
	globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
	navItems?:
		| T
		| {
				link?:
					| T
					| {
							type?: T;
							newTab?: T;
							reference?: T;
							url?: T;
							label?: T;
					  };
				id?: T;
		  };
	updatedAt?: T;
	createdAt?: T;
	globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
	input: {
		type?: ('publish' | 'unpublish') | null;
		locale?: string | null;
		doc?:
			| ({
					relationTo: 'homepage';
					value: string | Homepage;
			  } | null)
			| ({
					relationTo: 'about';
					value: string | About;
			  } | null)
			| ({
					relationTo: 'events-page';
					value: string | EventsPage;
			  } | null)
			| ({
					relationTo: 'blog-page';
					value: string | BlogPage;
			  } | null)
			| ({
					relationTo: 'jobs-page';
					value: string | JobsPage;
			  } | null)
			| ({
					relationTo: 'news-page';
					value: string | NewsPage;
			  } | null)
			| ({
					relationTo: 'publications-page';
					value: string | PublicationsPage;
			  } | null)
			| ({
					relationTo: 'videos-page';
					value: string | VideosPage;
			  } | null)
			| ({
					relationTo: 'pages';
					value: string | Page;
			  } | null)
			| ({
					relationTo: 'posts';
					value: string | Post;
			  } | null);
		global?: string | null;
		user?: (string | null) | User;
	};
	output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
	language?: ('typescript' | 'javascript' | 'css') | null;
	code: string;
	id?: string | null;
	blockName?: string | null;
	blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
	[k: string]: unknown;
}
